#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,I,R,W0621


"objects"


import inspect
import os
import profile
import shutil
import sys
import termios
import time


sys.path.insert(0, os.getcwd())


from objw.object  import Default, Object
from objw.workdir import Workdir, skel


Workdir.wdr = ".test"


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()


Cfg = Default()


param = Object()
param.fnd = ["log", "todo", "rss", "config"]
param.log = ["bla"]
param.mod = [""]
param.tdo = ["mekker"]


if os.path.exists("mods"):
    from mods import all as MODS
else:
    MODS = None


class Event(Default):

    "Event"

    def __init__(self):
        Default.__init__(self)
        self.orig    = ""
        self.result  = []
        self.txt     = ""

    def reply(self, txt):
        "add text to the result"
        self.result.append(txt)


class Commands:

    "Commands"

    cmds     = {}
    modnames = {}

    @staticmethod
    def add(func):
        "add command."
        Commands.cmds[func.__name__] = func
        if func.__module__ != "__main__":
            Commands.modnames[func.__name__] = func.__module__

    @staticmethod
    def scan(mod) -> None:
        "scan module for commands."
        for key, cmd in inspect.getmembers(mod, inspect.isfunction):
            if key.startswith("cb"):
                continue
            if 'event' in cmd.__code__.co_varnames:
                Commands.add(cmd)


def cmnd(txt):
    "do a command using the provided output function."
    if not txt:
        return None
    evn = Event()
    evn.txt = txt
    command(evn)
    if "v" in Cfg.opts:
        for text in evn.result:
            print(text)


def command(evt):
    "check for and run a command."
    parse(evt)
    func = Commands.cmds.get(evt.cmd, None)
    if func:
        func(evt)


def parse(obj, txt=None):
    "parse a string for a command."
    args = []
    obj.args    = obj.args or []
    obj.cmd     = obj.cmd or ""
    obj.gets    = obj.gets or Default()
    obj.hasmods = obj.hasmod or False
    obj.index   = None
    obj.mod     = obj.mod or ""
    obj.opts    = obj.opts or ""
    obj.result  = obj.reult or []
    obj.sets    = obj.sets or Default()
    obj.txt     = txt or obj.txt or ""
    obj.otxt    = obj.txt
    _nr = -1
    for spli in obj.otxt.split():
        if spli.startswith("-"):
            try:
                obj.index = int(spli[1:])
            except ValueError:
                obj.opts += spli[1:]
            continue
        if "==" in spli:
            key, value = spli.split("==", maxsplit=1)
            if key in obj.gets:
                val = getattr(obj.gets, key)
                value = val + "," + value
            obj.gets[key] = value
            continue
        if "=" in spli:
            key, value = spli.split("=", maxsplit=1)
            if key == "mod":
                obj.hasmods = True
                if obj.mod:
                    obj.mod += f",{value}"
                else:
                    obj.mod = value
                continue
            setattr(obj.sets, key, value)
            continue
        _nr += 1
        if _nr == 0:
            obj.cmd = spli
            continue
        args.append(spli)
    if args:
        obj.args = args
        obj.txt  = obj.cmd or ""
        obj.rest = " ".join(obj.args)
        obj.txt  = obj.cmd + " " + obj.rest
    else:
        obj.txt = obj.cmd or ""


def laps(seconds, short=True):
    "show elapsed time."
    txt = ""
    nsec = float(seconds)
    if nsec < 1:
        return f"{nsec:.2f}s"
    yea = 365*24*60*60
    week = 7*24*60*60
    nday = 24*60*60
    hour = 60*60
    minute = 60
    yeas = int(nsec/yea)
    nsec -= yeas*yea
    weeks = int(nsec/week)
    nsec -= weeks*week
    nrdays = int(nsec/nday)
    nsec -= nrdays*nday
    hours = int(nsec/hour)
    nsec -= hours*hour
    minutes = int(nsec/minute)
    nsec -= int(minute*minutes)
    sec = int(nsec)
    if yeas:
        txt += f"{yeas}y"
    if weeks:
        nrdays += weeks * 7
    if nrdays:
        txt += f"{nrdays}d"
    if short and txt:
        return txt.strip()
    if hours:
        txt += f"{hours}h"
    if minutes:
        txt += f"{minutes}m"
    if sec:
        txt += f"{sec}s"
    txt = txt.strip()
    return txt



def modnames(*args):
    "return module names."
    res = []
    for arg in args:
        res.extend({x for x in dir(arg) if not x.startswith("__")})
    return sorted(set(res))


def payload():
    "do payload."
    cmdz = Commands.cmds
    for _nr in range(Cfg.index or 1):
        for cmdd in cmdz:
            for ex in getattr(param, cmdd, [""]):
                txt = cmdd + " " + ex
                cmnd(txt)

def scan(modstr, *pkgs, disable=""):
    "scan modules for commands and classes"
    mds = []
    for modname in spl(modstr):
        if skip(modname, disable):
            continue
        for pkg in pkgs:
            module = getattr(pkg, modname, None)
            if not module:
                continue
            Commands.scan(module)
    return mds


def skip(name, skipp):
    "check for skipping"
    for skp in spl(skipp):
        if skp in name:
            return True
    return False


def spl(txt):
    "split comma separated string into a list."
    try:
        res = txt.split(',')
    except (TypeError, ValueError):
        res = txt
    return [x for x in res if x]


def wrap(function): # pylint: disable=E0102
    "reset terminal."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    "main"
    parse(Cfg, " ".join(sys.argv[1:]))
    Cfg.mod = ",".join(modnames(MODS))
    if "f" in Cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    scan(Cfg.mod, MODS)
    nrcommand = len(Commands.cmds) or 1
    if "p" in Cfg.opts:
        profile.runctx(payload.__code__, globals(), locals())
    else: 
        payload()
    if "v" in Cfg.opts:
        endtime = time.time()
        lap = laps(endtime-STARTTIME)
        percall = (endtime-STARTTIME)/((Cfg.index or 1 )*nrcommand)
        print(f"{lap} {Cfg.index or 1} {nrcommand} {percall}")


if __name__ == "__main__":
    wrap(main)
